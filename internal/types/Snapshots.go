package types

import (
	"time"
)

// CycleSnapshot captures the complete state of the AVM before, during, and after a single cycle.
// This is the primary data structure for historical logging and analysis.
type CycleSnapshot struct {
	// --- Snapshot Metadata ---
	SnapshotID      int64     `json:"snapshot_id,omitempty"` // Auto-incremented by DB
	CycleNumber     int       `json:"cycle_number"`
	Timestamp       time.Time `json:"timestamp"`
	ScoringParamsID *int64    `json:"scoring_params_id,omitempty"` // Foreign key to the active scoring_parameters

	// --- Pre-Action State ---
	InitialVaultValueUSD float64            `json:"initial_vault_value_usd"`
	InitialLiquidUSDC    float64            `json:"initial_liquid_usdc"`
	InitialPositions     []PositionSnapshot `json:"initial_positions"` // State of positions before actions

	// --- The Plan ---
	TargetAllocations map[PoolID]float64 `json:"target_allocations"` // The ideal portfolio from the analyzer
	ActionPlan        ActionPlan         `json:"action_plan"`        // The full plan generated by the planner

	// --- The Outcome ---
	FinalVaultValueUSD float64            `json:"final_vault_value_usd"`
	FinalLiquidUSDC    float64            `json:"final_liquid_usdc"`
	FinalPositions     []PositionSnapshot `json:"final_positions"`    // State of positions after actions
	TransactionHashes  []string           `json:"transaction_hashes"` // All tx hashes broadcast during the cycle
	ActionReceipts     []ActionReceipt    `json:"action_receipts"`    // All receipts from executed sub-actions

	// --- Performance Metrics for this Cycle ---
	AllocationEfficiencyPercent float64 `json:"allocation_efficiency_percent"` // How close the final state is to the target
	NetReturnUSD                float64 `json:"net_return_usd"`                // FinalValue - InitialValue
	TotalSlippageUSD            float64 `json:"total_slippage_usd"`            // Sum of value lost to slippage
	TotalGasFeeUSD              float64 `json:"total_gas_fee_usd"`             // Sum of gas fees paid
}

// PositionSnapshot is a detailed record of a single LP position at a point in time,
// designed for historical logging. It includes extra context not present in the live Position struct.
type PositionSnapshot struct {
	PoolID            PoolID  `json:"pool_id"`
	LPShares          string  `json:"lp_shares"` // Stored as string for arbitrary precision
	EstimatedValueUSD float64 `json:"estimated_value_usd"`
	AllocationPercent float64 `json:"allocation_percent"` // This position's % of the total vault value
	AgeDays           int     `json:"age_days"`

	// Contextual Pool Data (at the time of the snapshot)
	PoolTokenA string  `json:"pool_token_a"` // e.g., "ATOM"
	PoolTokenB string  `json:"pool_token_b"` // e.g., "USDC"
	PoolTVL    float64 `json:"pool_tvl"`
	PoolScore  float64 `json:"pool_score"`
}
